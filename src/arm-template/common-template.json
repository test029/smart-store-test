{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.1.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "If you would like to specify the location of resources that is different from resource group, specify here. Or leave blank then the deployment use the resource group's location."
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix string should be within 2 characters."
      }
    },
    "suffix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Set like `-dev`. Or, if suffix is not needed, leave blank."
      }
    },
    "delimiter": {
      "type": "string",
      "defaultValue": "-"
    },
    "logAnalyticsSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "allowedValues": [
        "Free",
        "Standard",
        "Premium",
        "PerNode",
        "PerGB2018",
        "Standalone",
        "CapacityReservation"
      ]
    },
    "logAnalyticsRetentionInDays": {
      "type": "int",
      "defaultValue": 30
    },
    "vnetNetworkAddress": {
      "type": "string",
      "defaultValue": "10.0"
    },
    "vnetMask": {
      "type": "int",
      "defaultValue": 16
    },
    "vnetSubnetMask": {
      "type": "int",
      "defaultValue": 24
    },
    "services": {
      "type": "array"
    },
    "vnetExists": {
      "type": "bool",
      "defaultValue": false
    }
  },
  "variables": {
    "location": "[if(equals(parameters('location'), ''), resourceGroup().location, parameters('location'))]",
    "keyVaultName": "[concat(parameters('prefix'), parameters('delimiter'), 'keyvault', parameters('suffix'))]",
    "logAnalyticsWorkspaceName": "[concat(parameters('prefix'), parameters('delimiter'), 'log', parameters('suffix'))]",
    "bastionName": "[concat(parameters('prefix'), parameters('delimiter'), 'bastion', parameters('suffix'))]",
    "bastionPublicIpName": "[concat(parameters('prefix'), parameters('delimiter'), 'bastion-ip', parameters('suffix'))]",
    "vnetName": "[concat(parameters('prefix'), parameters('delimiter'), 'vnet', parameters('suffix'))]",
    "vnetAddressPrefix": "[concat(parameters('vnetNetworkAddress'), '.0.0/', string(parameters('vnetMask')))]",
    "subnetNameBastion": "AzureBastionSubnet",
    "serviceBastion": {
      "identifier": "[variables('subnetNameBastion')]",
      "serviceEndpoints": [],
      "delegations": []
    },
    "services": "[concat(createArray(variables('serviceBastion')), parameters('services'))]",
    "copy": [
      {
        "name": "subnets",
        "count": "[length(variables('services'))]",
        "input": {
          "name": "[variables('services')[copyIndex('subnets')].identifier]",
          "properties": {
            "addressPrefix": "[concat(parameters('vnetNetworkAddress'), '.', string(copyIndex('subnets')), '.0/', parameters('vnetSubnetMask'))]",
            "privateEndpointNetworkPolicies": "[if(greater(length(variables('services')[copyIndex('subnets')].serviceEndpoints), 0), 'Enabled', 'Disabled')]",
            "serviceEndpoints": "[variables('services')[copyIndex('subnets')].serviceEndpoints]",
            "delegations": "[variables('services')[copyIndex('subnets')].delegations]"
          }
        }
      }
    ]
  },
  "resources": [
    {
      "name": "[variables('logAnalyticsWorkspaceName')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-03-01-preview",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "[parameters('logAnalyticsSku')]"
        },
        "retentionInDays": "[parameters('logAnalyticsRetentionInDays')]",
        "publicNetworkAccessForIngestion": "Disabled",
        "publicNetworkAccessForQuery": "Disabled"
      }
    },
    {
      "name": "[variables('keyVaultName')]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2018-02-14",
      "location": "[variables('location')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "accessPolicies": []
      }
    },
    {
      "name": "[concat(variables('keyVaultName'), '/microsoft.insights/logs')]",
      "type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ] 
    },
    {
      "condition": "[not(parameters('vnetExists'))]",
      "name": "[variables('vnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-11-01",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        },
        "subnets": "[variables('subnets')]"
      }
    },
    {
      "name": "[concat(variables('vnetName'), '/microsoft.insights/logs')]",
      "type": "Microsoft.Network/virtualNetworks/providers/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
        "logs": [
          {
            "category": "VMProtectionAlerts",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ] 
    },
    {
      "name": "[variables('bastionPublicIpName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2019-11-01",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "name": "[variables('bastionName')]",
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2019-11-01",
      "location": "[variables('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigBastion",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetNameBastion'))]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpName'))]"
      ]
    },
    {
      "name": "[concat(variables('bastionName'), '/microsoft.insights/logs')]",
      "type": "Microsoft.Network/bastionHosts/providers/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
        "logs": [
          {
            "category": "BastionAuditLogs",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/bastionHosts', variables('bastionName'))]"
      ] 
    }
  ],
  "outputs": {
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "vnetName": {
     "type": "string",
     "value": "[variables('vnetName')]"
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
    }
  }
}
